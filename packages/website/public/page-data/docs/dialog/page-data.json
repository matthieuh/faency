{"componentChunkName":"component---src-templates-doc-page-js","path":"/docs/dialog/","result":{"data":{"mdx":{"frontmatter":{"title":"Dialog","component":"Dialog","description":"An accessible dialog component, useful for helping users make decisions and to display critical information."},"body":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dialog\",\n  \"component\": \"Dialog\",\n  \"description\": \"An accessible dialog component, useful for helping users make decisions and to display critical information.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  return (\\n    <>\\n      <Button onClick={() => setIsOpen(true)}>Open dialog</Button>\\n      <Dialog isOpen={isOpen} onIsOpenChange={setIsOpen}>\\n        <Box p={6}>Hello</Box>\\n      </Dialog>\\n    </>\\n  );\\n};\\n\")), mdx(PropsTable, {\n    data: _defineProperty({\n      children: {\n        type: 'ReactNode',\n        description: 'The content to render'\n      },\n      isOpen: {\n        type: 'Boolean',\n        \"default\": 'false',\n        description: 'Whether it is open or not'\n      },\n      onIsOpenChange: {\n        type: 'Function',\n        description: 'A function to be called when it opens/closes'\n      },\n      refToFocusOnOpen: {\n        type: 'refToFocusOnOpen',\n        description: 'A reference to an element to focus on when it opens'\n      }\n    }, \"refToFocusOnOpen\", {\n      type: 'refToFocusOnOpen',\n      description: 'A reference to an element to focus on when it closes'\n    }),\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Examples\"), mdx(\"h3\", {\n    \"id\": \"alert-on-dismiss\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#alert-on-dismiss\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Alert on dismiss\"), mdx(\"p\", null, \"You can provide a function to get called when the Dialog is dismissed via click outside or escape key.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  return (\\n    <>\\n      <Button onClick={() => setIsOpen(true)}>Open dialog</Button>\\n      <Dialog\\n        isOpen={isOpen}\\n        onIsOpenChange={isOpen => {\\n          alert('Dialog is ', isOpen);\\n          setIsOpen(isOpen);\\n        }}\\n      >\\n        <Box p={6}>\\n          <Text as=\\\"p\\\">\\n            Dismissing the dialog by clicking outside or by pressing escape will\\n            trigger the `onIsOpenChange` callback.\\n          </Text>\\n        </Box>\\n      </Dialog>\\n    </>\\n  );\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"focus-element\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#focus-element\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Focus element\"), mdx(\"p\", null, \"It is possible to focus a specific element inside the dialog after it opens. If not provided, it will focus on the first focusable element.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const inputRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button onClick={() => setIsOpen(true)}>Open dialog</Button>\\n\\n      <Dialog\\n        isOpen={isOpen}\\n        onIsOpenChange={setIsOpen}\\n        refToFocusOnOpen={inputRef}\\n      >\\n        <Box p={6} position=\\\"relative\\\">\\n          <Box position=\\\"absolute\\\" top={1} right={1}>\\n            <GhostButton size={1} onClick={() => setIsOpen(false)}>\\n              <CrossIcon />\\n            </GhostButton>\\n          </Box>\\n          <Heading size={0} fontWeight={500}>\\n            Confirm password\\n          </Heading>\\n          <Input ref={inputRef} type=\\\"password\\\" placeholder=\\\"******\\\" my={4} />\\n          <Flex justifyContent=\\\"flex-end\\\">\\n            <Button mr={3} onClick={() => setIsOpen(false)}>\\n              Cancel\\n            </Button>\\n            <Button variant=\\\"blue\\\" onClick={() => setIsOpen(false)}>\\n              Confirm\\n            </Button>\\n          </Flex>\\n        </Box>\\n      </Dialog>\\n    </>\\n  );\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/docs/dialog/"}}}