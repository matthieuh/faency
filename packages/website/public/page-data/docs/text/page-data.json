{
  "componentChunkName": "component---src-templates-doc-page-js",
  "path": "/docs/text/",
  "result": {
    "data": {
      "mdx": {
        "frontmatter": {
          "title": "Text",
          "component": "Text",
          "description": "A primitive useful for rendering text."
        },
        "body": "function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Text\",\n  \"component\": \"Text\",\n  \"description\": \"A primitive useful for rendering text.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar SystemProps = makeShortcode(\"SystemProps\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Text>\\n  At Containous, our goal is to make networking boring.\\n</Text>\\n\")), mdx(PropsTable, {\n    data: {\n      children: {\n        type: 'ReactNode',\n        description: 'The content to render'\n      },\n      size: {\n        type: '0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10',\n        \"default\": '2',\n        description: 'The size to apply'\n      },\n      fontWeight: {\n        type: '500 | 600 | 700',\n        \"default\": '500',\n        description: 'The font weight to apply'\n      },\n      truncate: {\n        type: 'Boolean',\n        \"default\": 'false',\n        description: 'Whether it should truncate or not'\n      }\n    },\n    mdxType: \"PropsTable\"\n  }), mdx(SystemProps, {\n    props: ['textColor', 'margin', 'padding', 'fontStyle', 'fontFamily', 'fontWeight', 'textAlign', 'lineHeight'],\n    mdxType: \"SystemProps\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Examples\"), mdx(\"h3\", {\n    \"id\": \"size\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#size\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Size\"), mdx(\"p\", null, \"There are 11 sizes to choose from. Each size handles its own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"font-size\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"letter-spacing\"), \" accordingly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Text as=\\\"p\\\" mt={1} size={0}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={1}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={2}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={3}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={4}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={5}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={6}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={7}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={8}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={9}>Text component</Text>\\n<Text as=\\\"p\\\" mt={1} size={10}>Text component</Text>\\n\")), mdx(\"h3\", {\n    \"id\": \"font-weight\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#font-weight\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Font weight\"), mdx(\"p\", null, \"There are 3 weight options to choose from.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Text as=\\\"p\\\" fontWeight=\\\"500\\\">Text component</Text>\\n<Text as=\\\"p\\\" fontWeight=\\\"600\\\">Text component</Text>\\n<Text as=\\\"p\\\" fontWeight=\\\"700\\\">Text component</Text>\\n\")), mdx(\"h3\", {\n    \"id\": \"text-truncation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#text-truncation\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Text truncation\"), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" this will truncate your text based on its maximum width.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<Box width={100}>\\n  <Text as=\\\"p\\\" truncate>\\n    At Containous, our goal is to make networking boring.\\n  </Text>\\n</Box>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"
      }
    },
    "pageContext": { "slug": "/docs/text/" }
  }
}
