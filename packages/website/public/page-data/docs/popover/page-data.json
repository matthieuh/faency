{"componentChunkName":"component---src-templates-doc-page-js","path":"/docs/popover/","result":{"data":{"mdx":{"frontmatter":{"title":"Popover","component":"Popover","description":"An accessible Popover component that displays rich content as a result of clicking on a target."},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Popover\",\n  \"component\": \"Popover\",\n  \"description\": \"An accessible Popover component that displays rich content as a result of clicking on a target.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const buttonRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\\n        Open Popover\\n      </Button>\\n      <Popover targetRef={buttonRef} isOpen={isOpen} onIsOpenChange={setIsOpen}>\\n        <Box p={4}>Popover content</Box>\\n      </Popover>\\n    </>\\n  );\\n};\\n\")), mdx(PropsTable, {\n    data: {\n      children: {\n        type: 'ReactNode',\n        description: 'The content to render'\n      },\n      side: {\n        type: 'top | bottom | right | left',\n        \"default\": 'bottom',\n        description: 'The side to be positioned'\n      },\n      sideOffset: {\n        type: 'Number',\n        \"default\": '0',\n        description: 'The side offset to apply'\n      },\n      align: {\n        type: 'start | center | end',\n        \"default\": 'center',\n        description: 'The alignment to be positioned'\n      },\n      alignOffset: {\n        type: 'Number',\n        \"default\": '0',\n        description: 'The align offset to apply'\n      },\n      arrowOffset: {\n        type: 'Number',\n        \"default\": '6',\n        description: 'The arrow offset to apply'\n      },\n      noArrow: {\n        type: 'Boolean',\n        \"default\": 'false',\n        description: 'Whether the arrow should be visible or not'\n      },\n      collisionTolerance: {\n        type: 'Number',\n        \"default\": '0',\n        description: 'The collision tolerance to apply'\n      }\n    },\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#examples\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Examples\"), mdx(\"h3\", {\n    \"id\": \"side\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#side\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Side\"), mdx(\"p\", null, \"There are 4 side options to choose from.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [side, setSide] = React.useState('right');\\n  const buttonRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\\n        Open Popover\\n      </Button>\\n      <Popover\\n        targetRef={buttonRef}\\n        isOpen={isOpen}\\n        onIsOpenChange={setIsOpen}\\n        side={side}\\n      >\\n        <Box p={3}>\\n          <Heading size={0} mb={3} fontWeight={500}>\\n            Pick a side\\n          </Heading>\\n          <Select value={side} onChange={event => setSide(event.target.value)}>\\n            <option value=\\\"top\\\">top</option>\\n            <option value=\\\"right\\\">right</option>\\n            <option value=\\\"bottom\\\">bottom</option>\\n            <option value=\\\"left\\\">left</option>\\n          </Select>\\n        </Box>\\n      </Popover>\\n    </>\\n  );\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"side-offset\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#side-offset\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Side offset\"), mdx(\"p\", null, \"Control the side offset distance.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [sideOffset, setSideOffset] = React.useState(0);\\n  const buttonRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\\n        Open Popover\\n      </Button>\\n      <Popover\\n        targetRef={buttonRef}\\n        isOpen={isOpen}\\n        onIsOpenChange={setIsOpen}\\n        side=\\\"right\\\"\\n        sideOffset={Number(sideOffset)}\\n      >\\n        <Box p={3}>\\n          <Heading size={0} mb={3} fontWeight={500}>\\n            Set an side offset\\n          </Heading>\\n          <Slider\\n            min=\\\"-10\\\"\\n            max=\\\"10\\\"\\n            value={sideOffset}\\n            onChange={event => setSideOffset(event.target.value)}\\n          />\\n        </Box>\\n      </Popover>\\n    </>\\n  );\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"align\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#align\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Align\"), mdx(\"p\", null, \"There are 3 alignment options to choose from.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [align, setAlign] = React.useState('center');\\n  const buttonRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\\n        Open Popover\\n      </Button>\\n      <Popover\\n        targetRef={buttonRef}\\n        isOpen={isOpen}\\n        onIsOpenChange={setIsOpen}\\n        side=\\\"right\\\"\\n        align={align}\\n      >\\n        <Box p={3}>\\n          <Heading size={0} mb={3} fontWeight={500}>\\n            Pick an alignment\\n          </Heading>\\n          <Select\\n            value={align}\\n            onChange={event => setAlign(event.target.value)}\\n          >\\n            <option value=\\\"start\\\">start</option>\\n            <option value=\\\"center\\\">center</option>\\n            <option value=\\\"end\\\">end</option>\\n          </Select>\\n        </Box>\\n      </Popover>\\n    </>\\n  );\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"align-offset\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#align-offset\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Align offset\"), mdx(\"p\", null, \"Control the alignment offset distance. This only applies when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align\"), \" prop is either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [alignOffset, setAlignOffset] = React.useState(0);\\n  const buttonRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\\n        Open Popover\\n      </Button>\\n      <Popover\\n        targetRef={buttonRef}\\n        isOpen={isOpen}\\n        onIsOpenChange={setIsOpen}\\n        side=\\\"bottom\\\"\\n        align=\\\"start\\\"\\n        alignOffset={Number(alignOffset)}\\n      >\\n        <Box p={3}>\\n          <Heading size={0} mb={3} fontWeight={500}>\\n            Set an alignment offset\\n          </Heading>\\n          <Slider\\n            min=\\\"-10\\\"\\n            max=\\\"10\\\"\\n            value={alignOffset}\\n            onChange={event => setAlignOffset(event.target.value)}\\n          />\\n        </Box>\\n      </Popover>\\n    </>\\n  );\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"arrow-offset\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#arrow-offset\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Arrow offset\"), mdx(\"p\", null, \"Control the arrow offset distance.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live removeFragment\",\n    \"live\": true,\n    \"removeFragment\": true\n  }), \"() => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [arrowOffset, setArrowOffset] = React.useState(10);\\n  const buttonRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\\n        Open Popover\\n      </Button>\\n      <Popover\\n        targetRef={buttonRef}\\n        isOpen={isOpen}\\n        onIsOpenChange={setIsOpen}\\n        side=\\\"bottom\\\"\\n        align=\\\"start\\\"\\n        arrowOffset={Number(arrowOffset)}\\n      >\\n        <Box p={3}>\\n          <Heading size={0} mb={3} fontWeight={500}>\\n            Set an arrow offset\\n          </Heading>\\n          <Slider\\n            min=\\\"0\\\"\\n            max=\\\"25\\\"\\n            value={arrowOffset}\\n            onChange={event => setArrowOffset(event.target.value)}\\n          />\\n        </Box>\\n      </Popover>\\n    </>\\n  );\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/docs/popover/"}}}