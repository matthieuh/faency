{"componentChunkName":"component---src-templates-doc-page-js","path":"/docs/input-tags/","result":{"data":{"mdx":{"frontmatter":{"title":"InputTags","component":"InputTags","description":"Useful for getting input and showing contextual Tags aside."},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputTags\",\n  \"component\": \"InputTags\",\n  \"description\": \"Useful for getting input and showing contextual Tags aside.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<InputTags\\n  placeholder=\\\"Input Tags Placeholder\\\"\\n  tags={['Traefik', 'Compression']}\\n  onChange={value => alert(`onChange called with '${value}'`)}\\n/>\\n\")), mdx(PropsTable, {\n    data: {\n      value: {\n        type: 'string',\n        description: 'Optional. The initial value for the input field.'\n      },\n      placeholder: {\n        type: 'string',\n        description: 'Optional. Placeholder for the input field.'\n      },\n      tags: {\n        type: 'string[]',\n        description: 'Optional. List of tags to show next to the Input field.'\n      },\n      options: {\n        type: 'string[]',\n        description: 'Optional. List of options to show as autocomplete.'\n      },\n      maxInlineTags: {\n        type: 'number',\n        \"default\": '3',\n        description: \"Optional. Maximum number of tags to show inline next to the input field, aditional tags will be shown below the field. There's no overall limit for the quantity of tags.\"\n      },\n      renderTag: {\n        type: '(tag: string, onDeleteTag?: (tag: string) => void) => ReactNode',\n        \"default\": 'Renders the tags as blue chips',\n        description: 'Optional. Custom function to be used to render the Tags.'\n      },\n      renderOption: {\n        type: '(tag: string, onClick: (value: string) => void) => ReactNode',\n        description: 'Optional. Custom function to be used to render the options in the list for autocomplete.'\n      },\n      onInputChange: {\n        type: '(value: string) => void',\n        description: 'Optional. Function that is triggered after each input change. Triggers after each key press.'\n      },\n      onChange: {\n        type: '(value: string) => void',\n        description: 'Optional. Function that is triggered when is pressed the Enter key on the input.'\n      },\n      onDeleteTag: {\n        type: '(tag: string) => void',\n        description: 'Optional. Function triggered after a close button is clicked on a Tag. It sends the deleted tag value as parameter.'\n      }\n    },\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"<InputTags\\n  placeholder=\\\"Input with autocomplete\\\"\\n  tags={['Traefik', 'Compression']}\\n  options={['Redirect Path', 'Redirect Scheme']}\\n  onChange={value => alert(`Value submitted: '${value}'`)}\\n  onDeleteTag={tag => alert(`Tag deleted: '${tag}'`)}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/docs/input-tags/"}}}